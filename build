#!/bin/bash

set -e

pushd "$(dirname "$0")" > /dev/null
SCRIPT_DIR="$(pwd)"
popd > /dev/null
SRC_DIR=$SCRIPT_DIR/src
TGT_DIR=$SCRIPT_DIR/tgt
DIST_DIR=$TGT_DIR/dist
TESTS_DIR=$SCRIPT_DIR/tests

#
# change these functions if you want to build the C files differently
#

compile_c() { # production compile
	# $1 : the input .c file
	# $2 : the output .o file
	if which clang > /dev/null; then
		clang -c -o "$2" -fwrapv "$1"
	else
		echo 'ERROR:'
		echo 'Missing "clang" which is required for building.'
		echo ''
		echo 'Aborting build.'
		echo ''
		echo 'You can install "clang" by visiting:'
		echo '   http://llvm.org/'
		echo ''
		exit 1
	fi
}

compile_c_debug() { # debug compile (should define SINK_DEBUG)
	# $1 : the input .c file
	# $2 : the output .o file
	clang -c -o "$2" -fwrapv -g -DSINK_DEBUG "$1"
}

link_c() { # production link
	# $1 : the input .o files (space separated list)
	# $2 : the output binary file
	clang -o "$2" "$1"
}

link_c_debug() { # debug link
	# $1 : the input .o files (space separated list)
	# $2 : the output binary file
	clang -o "$2" "$1"
}

#
# ---
#

LINK_FILES=
BUILD_DEBUG=0
comp_and_link() {
	# $1 : the input .c file
	# $2 : the output .o file
	if [ "$BUILD_DEBUG" = "1" ]; then
		echo "Compiling $(basename "$1") (debug)..."
		compile_c_debug "$1" "$2"
	else
		echo "Compiling $(basename "$1")..."
		compile_c "$1" "$2"
	fi
	if [ "$LINK_FILES" = "" ]; then
		LINK_FILES="$2"
	else
		LINK_FILES="$LINK_FILES $2"
	fi
}

link_finish() {
	# $1 : the output binary
	if [ "$BUILD_DEBUG" = "1" ]; then
		echo 'Linking (debug)...'
		link_c_debug "$LINK_FILES" "$1"
	else
		echo 'Linking...'
		link_c "$LINK_FILES" "$1"
	fi
}

case "$1" in
	"all")
		BUILD_JS=1
		TEST_JS=1
		BUILD_C=1
		TEST_C=1
		if [ "$2" = "debug" ]; then
			BUILD_DEBUG=1
		fi
		;;
	"js")
		BUILD_JS=1
		TEST_JS=0
		BUILD_C=0
		TEST_C=0
		if [ "$2" = "debug" ]; then
			BUILD_DEBUG=1
		fi
		;;
	"test-js")
		BUILD_JS=0
		TEST_JS=1
		BUILD_C=0
		TEST_C=0
		;;
	"c")
		BUILD_JS=0
		TEST_JS=0
		BUILD_C=1
		TEST_C=0
		if [ "$2" = "debug" ]; then
			BUILD_DEBUG=1
		fi
		;;
	"test-c")
		BUILD_JS=0
		TEST_JS=0
		BUILD_C=0
		TEST_C=1
		;;
	"")
		BUILD_JS=1
		TEST_JS=1
		BUILD_C=1
		TEST_C=1
		;;
	"debug")
		BUILD_JS=1
		TEST_JS=1
		BUILD_C=1
		TEST_C=1
		BUILD_DEBUG=1
		;;
	"clean")
		echo Cleaning...
		rm -rf $TGT_DIR
		echo Done
		exit 0
		;;
	"dist")
		echo Publishing builds to ./dist
		rm -rf $SCRIPT_DIR/dist
		cp -Rf $TGT_DIR/dist $SCRIPT_DIR/

		cat <<README > $SCRIPT_DIR/dist/README.md
# Builds for Distribution

This build is a SNAPSHOT and not an official release.  You might not want to use it.

Built on: $(date -u)

* \`sink.js\`: Browser version of Sink
* \`sink/*\`: NPM/Node.js version of Sink
README

		echo Done
		exit 0
		;;
	*)
		echo './build [command] [debug]'
		echo ''
		echo 'Commands:'
		echo '  all       Build and test everything (default)'
		echo '  js        Build the JavaScript sources (node + browser)'
		echo '  test-js   Run the tests against the JavaScript build'
		echo '  c         Build the C source'
		echo '  test-c    Run the tests against the C build'
		echo ''
		echo '  clean     Delete the tgt directory'
		echo '  dist      Publish JavaScript builds to ./dist'
		echo ''
		echo 'If "debug" is specified, then builds will be debug versions'
		exit 0
		;;
esac

run_tests() {
	# $1 : 'js' or 'c'
	test_prog="$1"
	out=$(mktemp "$TGT_DIR"/test_output.stdout.XXXXXX)
	err=$(mktemp "$TGT_DIR"/test_output.stderr.XXXXXX)
	for test_dir in $TESTS_DIR/*; do
		test_base=$(basename "$test_dir")
		test_num=$(echo "$test_base" | cut -d . -f 1)
		test_name=$(echo "$test_base" | cut -d . -f 2)

		printf "%3s.%-10s  " "$test_num" "$test_name"

		if [ "$test_prog" = "js" ]; then
			set +e
			$DIST_DIR/sink/cmd.js "$test_dir"/"$test_name".sink "$test_name" > "$out" 2>"$err"
			status=$?
			set -e
		else
			echo TODO
			exit 1
		fi

		if [ -e "$test_dir"/pass.txt ]; then
			if [ "$status" != "0" ]; then
				echo FAIL
				cat "$err"
				rm -f "$out"
				rm -f "$err"
				exit 1
			else
				set +e
				d=$(diff -u --label 'Expected Output' "$test_dir"/pass.txt --label \
					'Actual Output' "$out")
				status=$?
				set -e
				if [ "$status" = "0" ]; then
					echo PASS
				else
					echo FAIL
					echo "$d"
					rm -f "$out"
					rm -f "$err"
					exit 1
				fi
			fi
		else
			if [ "$status" = "0" ]; then
				echo FAIL
				echo 'Expecting test to result in error; instead it ran with the result:'
				cat "$out"
				rm -f "$out"
				rm -f "$err"
				exit 1
			else
				echo PASS
			fi
		fi
	done
	rm -f "$out"
	rm -f "$err"
}

#
# JavaScript build
#
if [ "$BUILD_JS" = "1" ]; then
	echo Building JavaScript...

	# build node version
	mkdir -p $DIST_DIR/sink
	cp -Rf $SRC_DIR/*.js $DIST_DIR/sink

	# build browser version
	if which browserify > /dev/null; then
		#browserify $DIST_DIR/sink/index.js -o $DIST_DIR/sink.js
		echo 'TODO: browserify'
	else
		echo 'WARNING:'
		echo 'Missing "browserify" which is required for building.'
		echo ''
		echo 'Skipping browser build.'
		echo ''
		echo 'You can install "browserify" via:'
		if which npm > /dev/null; then
			echo '   npm install -g browserify'
		else
			echo '   1. Installing node.js from https://nodejs.org/'
			echo '   2. Executing: npm install -g browserify'
		fi
		echo ''
	fi
fi

if [ "$TEST_JS" = "1" ]; then
	echo Testing JavaScript build...
	if which node > /dev/null; then
		if [ -e $DIST_DIR/sink/cmd.js ]; then
			run_tests js
		else
			echo 'ERROR:'
			echo 'Missing JavaScript build of sink.'
			echo ''
			echo 'Aborting tests for Javascript build.'
			echo ''
			echo 'You can build the JavaScript version of sink via:'
			echo '   ./build js'
			echo ''
			exit 1
		fi
	else
		echo 'WARNING:'
		echo 'Missing "node" which is required for running JavaScript tests.'
		echo ''
		echo 'Skipping tests for JavaScript build.'
		echo ''
		echo 'You can install "node" by visiting:'
		echo '   https://nodejs.org/'
		echo ''
	fi
fi

#
# C build
#
if [ "$BUILD_C" = "1" ]; then
	echo Building C...

	mkdir -p $TGT_DIR

	comp_and_link src/sink.c $TGT_DIR/sink.o
#	comp_and_link b.c b.o
	link_finish $TGT_DIR/sink
fi

if [ "$TEST_C" = "1" ]; then
	echo Testing C build...
	run_tests c
fi

echo Done
